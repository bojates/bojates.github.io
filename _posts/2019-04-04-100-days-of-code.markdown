---
title: 100 days of code
layout: post
date: 2019-04-08 17:11:47
---
## Rules
####  I will code for at least one hour every weekday for the next 100 days

1. I will keep a log and push it to GitHub every day
2. If I miss a day, it will be added to the end of the challenge
3. Reading articles doesn't count. I must actually be coding on a project or working through solutions. 
4. Paid work projects don't count. 

## Log
### Day 1: 8 April, 2019 (Mon)

**Today's Progress**: Advanced problem: stars in a diamond. Tried timing it, and managed the first pass at the solution in 15 mins. Refactored for about 45 further mins, and looked at other solutions. 

**Thoughts**: I forgot about the center method, which would have provided another solution. The main challenge was trying to make the code clear with variable naming. 

**Link(s) to work**: 
1. [Seeing stars](https://github.com/bojates/launchschool/blob/master/rb101/small_probs/advanced_1/2.rb)

### Day 2: 9 April, 2019 (Tues)

**Today's Progress**: Advanced problems: transposing matrixes. Took 15 mins for each one to get to a working solution, then spent time refactoring and looking the provided solutions. 

**Thoughts**: The mixture of `each_with_index` alongside a nested `map` is quite tricky to get used to. Once I'm in one mode of thought about how to handle some data, I seem to stick with it. I used `each_with_index` quite a lot, but the solutions used `0...range_limit` and `map` which works. A solution using `range_limit.times` also works. I'm not sure how best to choose between these different approaches, but am always aiming for clarity as much as possible, so that feels like a good starting point.

**Link(s) to work**: 
1. [Matrix 1](https://github.com/bojates/launchschool/blob/master/rb101/small_probs/advanced_1/3.rb)
2. [Matrix 2](https://github.com/bojates/launchschool/blob/master/rb101/small_probs/advanced_1/4.rb)

### Day 3: 10 Apr, 2019 (Weds)

**Today's Progress**: Advanced problems. Rotating matrices and then fixing a bug. Fix the bug took about 30 mins because I spent quite a while trying to work out why the return value was nil. I didn't manage to work it out, but the explanation at LS made total sense.

**Thoughts**: It didn't even occur to me that Ruby would go to the next line for the evaluation of the `if`, `elsif`, `else` statement. I'm not sure why, but it is quite intuitive, as Ruby is quite forgiving about line breaks. 

**Links to work**:
1. [Matrices](https://github.com/bojates/launchschool/blob/master/rb101/small_probs/advanced_1/5.rb)
2. [Fix the bug](https://github.com/bojates/launchschool/blob/master/rb101/small_probs/advanced_1/6.rb)

### Day 4: 11th April, 2019 (Thurs)

**Today's Progress**: Advanced problem merging arrays in sorted order, without using sort. V. tricky. Took about 30 mins to get a working version, then a further 25 or so looking at other solutions. Then CodeWars: 1 at level 7 and a couple at level 6. 

**Thoughts**: I seem able to reach solutions, but they aren't always the nicests, cleanest ones. CodeWars seems fun, but it's a little bit confusing at the moment. 

**Link(s) to work**: 
1. [Merge](https://github.com/bojates/launchschool/blob/master/rb101/small_probs/advanced_1/7.rb)

### Day 5: 12th April, 2019 (Fri)

**Today's Progress**: Advanced problem merge sort. I couldn't solve it in 45 minutes, and gave up and looked at the psuedo code. I solved it after that, but still struggle to follow the recursion properly. 

**Thoughts**: Recursion is tough. I understand it when I dive into it, but each time I need to get my head around it. I think it's becoming clearer each time I try to grapple with it. But only just! It's also tough going into these advanced problems cold. I feel like it might be sensible to do a bit more of a 'warm up' into them. At the moment, I'm glancing through my notes from the previous day and diving in. I might be better starting with a codewars level 7, and then diving into advanced. 

**Link(s) to work**: 
1. [Merge Sort](https://github.com/bojates/launchschool/blob/master/rb101/small_probs/advanced_1/8.rb)

### Day 6: 15th April, 2019 (Mon)

**Today's Progress**: Some CodeWars level 6, and then Advanced problem Egyptian Fractions. I spent about 45 mins unable to work it out, then read through an online resource about it, which explained the Greedy algorithm, which I think implemented. Then I checked the solution, and refactored. Then I saw that the algorithm is inefficient if the number is large (e.g. 4), so refactored again to try to solve that. 

**Thoughts**: Warming up with CodeWars was good, because the Egyptian Fractions problem was very tough. I went in and out of comprehension of the problem. Rubocop is unhappy about my conditional statements. I don't know how I could refactor them to make rubocop happy. 

**Link(s) to work**: 
1. [Egyptian Fractions](https://github.com/bojates/launchschool/blob/master/rb101/small_probs/advanced_1/9.rb)

### Day 7: 16th April, 2019 (Tues)

**Today's Progress**: CodeWars Level 6. Also a refactoring on the LS forum. And my first study group, in which I attempted a live coding challenge. 

**Thoughts**: Live coding is hard, and scary, and I'm glad I've got one over with! Refactoring a problem trying to work out the parameters of the problem can be fun. 

### Day 8: 17th April, 2019 (Weds)

**Today's Progress**: Exploring Prime numbers. Wrote an is_prime? method. Discovered negative numbers are normally not considered Prime. Found the Prime method in ruby. Tried doing a CodeWars challenge while talking out loud, and made a mistake in understanding the question as a result. 

**Thoughts**: I need to practice talking out loud more, and I should explore approaches for ensuring I understand the problem. I normally take the written problem and break it into lines, but I didn't do that today. I think I would have found it if I did. Perhaps the message is, trust myself and my processes and don't change them just because I'm talking aloud or feeling time pressure. 25 mins to solve it is not good enough. 

### Day 9: 18th April, 2019 (Thurs)

**Today's Progress**: Worked on a couple of CodeWars problems. One at level 4, which was impossible. One at level 5, which I got close to, but ultimately found impossible. Perhaps due to the maths. 

**Thoughts**: Good to try these challenges. Even failure counts as learning. 

### Day 10: 23rd April, 2019 (Tues)

**Today's Progress**: Debugging exercises. Trying to explain the problem in a few of them, to practice for the LS assessment. 

**Thoughts**: Sluggish return after a few days off for the long weekend. I am still ocassionally missing x += i stuff. And I haven't memorised some key methods as well as I would like to. 

**Link(s) to work**: 
1. [Debugging 1-5](https://github.com/bojates/launchschool/tree/master/rb101/small_probs/debugging)

### Day 11: 23rd April, 2019 (Weds)

**Today's Progress**: Debugging exercises in LS. 

**Thoughts**: It's good to keep working away at these, but I'm aware I need to practice the precision of language and talking through problems out loud. Getting the right balance is feeling a bit tricky. 

**Link(s) to work**: 
1. [Debugging 6-9](https://github.com/bojates/launchschool/tree/master/rb101/small_probs/debugging)

### Day 12: 25th April, 2019 (Thur)

**Today's Progress**: Finished debugging exercises. Working on explaining code in precise full English. 

**Thoughts**: It feels like this should be easy, but it's not. It just needs practice. It's interesting because I understand the concepts, but using the correct terminology is more difficult. I can tell this is going to be a key bit of feeling confident in what I know, but it's interesting how much low level resistance I am feeling to it. It doesn't feel like 'learning' in the same way as other exercises. But it is! 

**Link(s) to work**: 
1. [Debugging 10](https://github.com/bojates/launchschool/tree/master/rb101/small_probs/debugging)

### Day 13: 30th April, 2019 (Tues)

**Today's Progress**: CodeWars Kata. Level 6, but I found it very difficult. 

**Thoughts**: Reverse pyramid. I became convinced it was a recursion problem that I was going to solve without recursion, but it isn't. It took me a while to really get the logic of it, and my solution isn't nearly as nice as others. It's been a busy and stressful few days in my life, and coding has taken a back seat. It's feeling tough to get back into it, and I can feel my level has dropped a bit through lack of focussed practice, but also the mental energy I've been expending elsewhere. It feels like I can't give it 100% and I don't feel as persistent. So, in that context, it was good to see this one through to a resolution, however messy. 

**Link(s) to work**:
1. [Upside-Down Pyramid Addition...REVERSED!](https://www.codewars.com/kata/reviews/5cc6daa88ebbd900010618c4/groups/5cc86c2ee0e3e00001a97f35)

### Day 14: 1st May, 2019 (Weds)

**Today's Progress**:  Looked into a couple of solutions for Dasherizer problem that was covered in study group. Then explored how to compare adjacent items in arrays. One option is the `each_cons` method in ruby, which takes each consecutive pair. Another is to loop through the array with an index, and behave differently on the last loop (where the compared item will be returned a `nil` because it doesn't exist (arr[max_index + 1]). 

e.g. 

{% highlight ruby %}
  def compare_items(arr)
    # Can also use `map.with_index` here.
    arr.each_with_index do |x, idx|
      if idx == arr.size - 1
        # do something for the last loop only
      else
        if x == arr[idx + 1]
          # Do what you're gonna do
        else
          # Do what you're gonna do 
        end
      end
    end
  end
{% endhighlight %}

Or the `each_cons` approach. 
{% highlight ruby %}
  def compare_items(arr)
    arr.each_cons(2) do |a, b|
      if a == b
        # do what you're gonna do
        # e.g. add a to an array
        new_arr << "#{a} is amazing"
      else
        new_arr << a
      end
    end
    # You might want to collect the last item here 
    # e.g. if you've been collecting `a` in the block. 
    # because the final item is never set to `a` when we have 2 cons items
    new_arr << arr.last
  end
{% endhighlight %}

**Thoughts**: So much in ruby is so easy, so it's a bit odd there isn't a shortcut way to say `first in the iteration` or `last in the iteration`.

### Day 15: 2nd May, 2019 (Thurs)

**Today's Progress**: One CodeWars problem. Getting massively confused with time and calculations around distance and velocity etc. 

**Thoughts**: Should spend some time getting my head around all this maths again, perhaps?

### Day 16: 3rd May, 2019 (Fri)

**Today's Progress**: CodeWars Kata. Revisited briefly the kata from yesterday and the solution seemed to require cleverness around the velocity calculation that I can't quite get my head around. Then did another kata in a decent timeframe about version incrementing. Happy with my result, but when looking at solutions I see there is a ruby method that does it out of the box. Did some Anki flashcards that I downloaded as well. Some of these are beyond my knowledge so far, but quite interesting to see. 

**Thoughts**: I should probably revise some more ruby methods. I'm not sure if I should be getting my head around the velocity stuff. 

### Day 17: 7th May, 2019 (Tue)

**Today's Progress**: Reviewing easy exercises from before. Solving them again and often finding the same solution. 

**Thoughts**: Balacing doing the coding, through this project, with the theoretical revision, is quite a good balance. 

### Day 18: 8th May, 2019 (Wed)

**Today's Progress**: Reviewing medium solutions and finding I'm solving them in tidier ways. 

**Thoughts**: Very tired today, so misread a question. That's the bit that goes out the window when my brain isn't engaged enough. 

### Day 19: 9th May, 2019 (Thurs)

**Today's Progress**: Working out how to tackle the assessment, and working through timings and devising an actual strategy. 

**Thoughts**: Was in two minds about whether this counts, but I think it does. Just. 

### Day 20: 10th May, 2019 (Fri)

**Today's Progress**: Working through medium lessons again and pulling out notes for definitions. 

**Thoughts**: Still refining the exact wording for things. 

### Day 21: 14th May, 2019 (Tue)

**Today's Progress**: Working through Enumerable methods and trying to understand them all. Got as far as 'c'. 

**Thoughts**: Skipped yesterday's day of code because I finally did the assessment. 

### Day 22: 15th May, 2019 (Wed)

**Today's Progress**: Working through Enumerable methods and trying to understand them all. d and e and added some to Anki. 

**Thoughts**: There's a certain pleasure to plugging away at this stuff. Awaiting assessment results. 

### Day 23: 16th May, 2019 (Thu)

**Today's Progress**: Got my results, so working on the things that should be 'easy' according to the next bit of the study guide. 

**Thoughts**: It's odd actually having to engage with 'fibonacci' sequences and 'factors' etc. I wonder if these are actually needed in the real world? Happy with my assessment result. :-) 


### Day 24: 17th May, 2019 (Fri)

**Today's Progress**: Revisiting problems and recording myself. And trying to learn the formatting rule. `#{"%02d" % i}`. 

**Thoughts**: Speaking while coding needs work. Good that I'm working on it, then. 

### Day 25: 22nd May, 2019 (Wed)

**Today's Progress**: Revisiting medium problems. Recorded myself yesterday but didn't manage a full hour, so didn't count. 

**Thoughts**: Speaking while coding still needs work. 

### Day 26: 23rd May, 2019 (Thur)

**Today's Progress**: Revisiting medium problems. Reaching cleaner solutions than previously, which is nice. Worked on the Friday 13th problems. 

**Thoughts**: It's good to have greater and greater fluency with the code, and revisiting the older problems is interesting as sometimes I reach the same solution, and sometimes it's quite different. Practicing going into irb to confirm things is nice, too. 

### Day 27: 24 May 2019 (Fri)

**Today's Progress**: Video'd myself doing a level 5 kata and it took 40 mins. Tough challenge, and made harder by filming. 

**Thoughts**: I think I need to get more comfortable mutating arrays and navigating around them with push, pop etc. I seem to often think there's a simpler way than the one I think of. I should probably trust the longer approach I can think of and then try to simplify. 

### Day 28: 27 May 2019 (Mon)

**Today's Progress**: Working through a couple of Codewars problems and then looking into Prime numbers a bit. A relatively safe rule seems to be to have a range to check on that's (2..Math.sqrt(num)). 

Also looking into '/(?=[A-Z])/' and '/(?<=[A-Z])/' for splitting strings and keeping the delimiter. 

**Thoughts**: Not sure to what extent I should learn these regexps vs just knowing where to find them. 

### Day 29: 28 May 2019 (Tue)

**Today's Progress**: Working on coding out loud in another study group. Then working through the problem again in my own time. 

**Thoughts**: Still difficult to keep calm enough under pressure and not just rush through stuff. 

### Day 29: 30 May 2019 (Wed)

**Today's Progress**: Working through lots of revisited coding challenges ahead of the interview tomorrow. 

**Thoughts**: Feeling rusty with some of these, I think, but also find bits of them easier. Hard to guage exactly where I'm at. 

### Day 30: 30 May 2019 (Thu)

**Today's Progress**: Warm up for the interview and then the interview itself. 

**Thoughts**: Got stressed in the warm up, which wasn't good. Went well. Feedback was to work on verbalising more consistently, and to do the pseudo code at a higher level. These are both things I know I struggle with, and I hope will just improve with practice. 

### Day 31: 31 May 2019 (Fri)

**Today's Progress**: Starting to learn OOP. 

**Thoughts**: It was good to examine the OOP concepts and play with them, slightly ahead of the book asking me to. Good to feel proactive. In other news, feeling like my note taking might want reviewing slightly. 

### Day 32: 3 Jun 2019 (Mon)

**Today's Progress**: Working through a couple of kata on CodeWars. Looked at feedback for one of my solutions and saw its not considered efficient. Interesting element I've not been paying attention to. 

**Thoughts**: Also trying to review how to take notes, and improve my usage of the tools I already have in use. It's almost like for every bit of my setup it's worth spending an hour going through the docs every now and then to level up. But I can only change so much at a time. 

### Day 33: 5 Jun 2019 (Tue)

**Today's Progress**: Worked on a small project for work (but not paid, so I decided it counts) to convert a json file from Joomla to an xml format for WordPress. 

**Thoughts**: I was more confident doing this than I would have been a few months ago. I broke the problem down quite well and was confident using the modules I included. 

**Links**: https://gist.github.com/bojates/a7953fe2cfd3dca6e74aab287d7d01c1

### Day 34: 5 Jun 2019 (Weds)

**Today's Progress**: Working through a level 4 kata. Certainly beyond me. 

**Thoughts**:  Interesting to attempt, but perhaps not the best use of time. 

### Day 35: 6 Jun 2019 (Thu)

**Today's Progress**: Working through OOP problems. RPS. 

**Thoughts**: Being a bit distracted about how to handle my note taking, as this is starting to feel quite fundamental. 

### Day 36: 7 Jun 2019 (Fri)

**Today's Progress**: Working through TickTackToe oop code for LS. 

**Thoughts**: Struggling with it a bit because it's hard to care. Taking it in bites. 

### Day 37: 12 Jun 2019 (Wed)

**Today's Progress**: Coded with Nathan. Then followed up a little myself. 

**Thoughts**: Very useful to code with Nathan. We have different strengths, so I can see this being super useful. He helped me think about live interviewing as 'performance' and also was very disciplined about working through PEDAC. 

### Day 38: 13 Jun 2019 (Thu)

**Today's Progress**: RPSLS to the max. 

**Thoughts**: Been struggling to care about this, but decided to go a 'hack' route, rather than game it the way suggested. The display info feels like it should be extractable from the main class, but I don't see how. 

### Day 39: 14 Jun 2019 (Fri)

**Today's Progress**: Finishing off RPSLS to my satisfaction and submitting it for code review. 

**Thoughts**: A small extra feature I wanted to add at the end (splitting text on word breaks after a certain length) turned into a bit of a nightmare. Interesting that these things that seem like they should be simple sometimes aren't. 

### Day 40: 16 Jun 2019 (Sun)

**Today's Progress**: Responding to feedback on RPSLS. CodeWarriors level 5 trying to use PEDAC really clearly. 

**Thoughts**: Enjoying using PEDAC with greater discipline. 

### Day 41: 17 Jun 2019 (Mon)

**Today's Progress**: A couple more changes to RPS based on feedback. Trying to really understand the way self works. Experimenting with examples and then creating more examples as I read through the next bit of the lesson. 

**Thoughts**: I'm trying to write up notes from each lesson, from memory, immediately after doing each lesson. I'm writing them straight to the computer, and will need to see if this sticks as well as writing to a notebook has. 

### Day 42: 21 Jun 2019 (Tue)

**Today's Progress**: OOP reading and following coding challenges.

**Thoughts**: Feeling unwell, so taking it slow. 

### Day 43: 21 Jun 2019 (Thur)

**Today's Progress**: CodeWars challenge that was completely beyond me. 

**Thoughts**: Maths problem. I needed to multiply by a square, I think. And then find a pattern. V difficult. 

### Day 44: 21 Jun 2019 (Fri)

**Today's Progress**: Working through RPS OOP style. 

**Thoughts**: Trying to solve some of it ahead of the videos. 

<!--
` dayheader keyword 
## Log template 
### Day 1: 4th April, 2019 (Thurs)

**Today's Progress**: 

**Thoughts**: 

**Link(s) to work**: 
-->
